import { useState, useMemo } from 'react'

/**
 * Hook personalizado para gerenciar o estado e l√≥gica do jogo de mentalismo
 * 
 * Gerencia a experi√™ncia de leitura mental atrav√©s de energia ps√≠quica.
 * 
 * @returns {Object} Estado e fun√ß√µes do jogo
 */
export function useMentalismGame() {
  const [currentStep, setCurrentStep] = useState(0)
  const [gameId, setGameId] = useState(0) // Para for√ßar regenera√ß√£o dos s√≠mbolos

  /**
   * Gera o mapeamento de s√≠mbolos para a experi√™ncia ps√≠quica
   * Distribui os s√≠mbolos de acordo com a energia mental
   */
  const { symbolMap, magicSymbol } = useMemo(() => {
    const allSymbols = [
      'üåü', 'üåô', '‚òÄÔ∏è', '‚ù§Ô∏è', 'üî•', 'üíé', 'üöÄ', 'üéâ', 'üí°', 'üîë',
      'üëë', 'üé©', 'üîÆ', '‚ú®', 'üçÄ', 'üéØ', '‚öì', 'üéÅ', 'üéà', 'üé≤',
      'üß©', 'üé®', 'üé∏', 'üèÜ', 'ü•á', 'üåç', 'üß≠', '‚è≥', '‚ö°', 'üíØ',
      'ü¶ã', 'üå∫', 'üé≠', 'üé™', 'üéµ', 'üéπ', 'üé∫', 'üéª', 'üåà', '‚≠ê'
    ]
    
    // Embaralha os s√≠mbolos para cada nova partida
    const shuffledSymbols = [...allSymbols].sort(() => Math.random() - 0.5)
    const magicSymbol = shuffledSymbols[0]
    const distractionPool = shuffledSymbols.slice(1, 15)
    
    const symbolMap = new Map()
    
    // Preenche o mapa de s√≠mbolos
    for (let i = 0; i <= 99; i++) {
      if (i > 0 && i % 9 === 0) {
        // N√∫meros com energia especial recebem o s√≠mbolo m√°gico
        symbolMap.set(i, magicSymbol)
      } else {
        // Outros n√∫meros recebem s√≠mbolos aleat√≥rios
        const randomSymbol = distractionPool[
          Math.floor(Math.random() * distractionPool.length)
        ]
        symbolMap.set(i, randomSymbol)
      }
    }
    
    return { symbolMap, magicSymbol }
  }, [gameId]) // Regenera quando gameId muda

  /**
   * Avan√ßa para o pr√≥ximo passo
   */
  const nextStep = () => {
    setCurrentStep(prev => prev + 1)
  }

  /**
   * Volta para o passo anterior
   */
  const prevStep = () => {
    setCurrentStep(prev => Math.max(0, prev - 1))
  }

  /**
   * Reinicia o jogo
   */
  const restart = () => {
    setCurrentStep(0)
    setGameId(prev => prev + 1) // For√ßa regenera√ß√£o dos s√≠mbolos
  }

  /**
   * Vai para um passo espec√≠fico
   */
  const goToStep = (step) => {
    if (step >= 0 && step <= 5) {
      setCurrentStep(step)
    }
  }

  return {
    currentStep,
    symbolMap,
    magicSymbol,
    nextStep,
    prevStep,
    restart,
    goToStep
  }
}