import { useState, useMemo } from 'react'

/**
 * Hook personalizado para gerenciar o estado e l√≥gica do jogo de mentalismo
 * 
 * Gerencia a experi√™ncia de leitura mental atrav√©s de energia ps√≠quica.
 * 
 * @returns {Object} Estado e fun√ß√µes do jogo
 */
export function useMentalismGame() {
  const [currentStep, setCurrentStep] = useState(0)
  const [gameId, setGameId] = useState(0) // Para for√ßar regenera√ß√£o dos s√≠mbolos

  /**
   * Gera o mapeamento de s√≠mbolos para a experi√™ncia ps√≠quica
   * Distribui os s√≠mbolos de acordo com a energia mental
   */
  const { symbolMap, magicSymbol } = useMemo(() => {
    const allSymbols = [
      'üåü', 'üåô', '‚òÄÔ∏è', '‚ù§Ô∏è', 'üî•', 'üíé', 'üöÄ', 'üéâ', 'üí°', 'üîë',
      'üëë', 'üé©', 'üîÆ', '‚ú®', 'üçÄ', 'üéØ', '‚öì', 'üéÅ', 'üéà', 'üé≤',
      'üß©', 'üé®', 'üé∏', 'üèÜ', 'ü•á', 'üåç', 'üß≠', '‚è≥', '‚ö°', 'üíØ',
      'ü¶ã', 'üå∫', 'üé≠', 'üé™', 'üéµ', 'üéπ', 'üé∫', 'üéª', 'üåà', '‚≠ê'
    ]
    
    // Embaralha os s√≠mbolos para cada nova partida
    const shuffledSymbols = [...allSymbols].sort(() => Math.random() - 0.5)
    const magicSymbol = shuffledSymbols[0]
    const distractionPool = shuffledSymbols.slice(1)
    
    const symbolMap = new Map()
    
    // Para cada m√∫ltiplo de 9, cria um s√≠mbolo √∫nico que se repete exatamente uma vez na mesma p√°gina
    const pageSymbols = new Map() // Mapeia cada m√∫ltiplo de 9 para seu s√≠mbolo
    const usedSymbols = new Set()
    
    // Identifica os m√∫ltiplos de 9 e atribui s√≠mbolos √∫nicos para cada um
    const magicNumbers = []
    for (let i = 9; i <= 99; i += 9) {
      magicNumbers.push(i)
      
      // Seleciona um s√≠mbolo √∫nico para este m√∫ltiplo de 9
      let symbolForThisMultiple
      do {
        symbolForThisMultiple = shuffledSymbols[Math.floor(Math.random() * shuffledSymbols.length)]
      } while (usedSymbols.has(symbolForThisMultiple))
      
      usedSymbols.add(symbolForThisMultiple)
      pageSymbols.set(i, symbolForThisMultiple)
    }
    
    // Para cada p√°gina, seleciona um n√∫mero aleat√≥rio para repetir o s√≠mbolo do m√∫ltiplo de 9
    const decoyNumbers = new Map() // Mapeia m√∫ltiplo de 9 -> n√∫mero que repetir√° seu s√≠mbolo
    
    magicNumbers.forEach(multiple => {
      const pageStart = Math.floor((multiple - 1) / 10) * 10 + 1
      const pageEnd = pageStart + 9
      
      // Encontra todos os n√∫meros da p√°gina que n√£o s√£o o pr√≥prio m√∫ltiplo de 9
      const availableNumbers = []
      for (let i = pageStart; i <= pageEnd; i++) {
        if (i !== multiple && i >= 10) { // Exclui n√∫meros menores que 10
          availableNumbers.push(i)
        }
      }
      
      // Seleciona um n√∫mero aleat√≥rio para repetir o s√≠mbolo
      if (availableNumbers.length > 0) {
        const randomIndex = Math.floor(Math.random() * availableNumbers.length)
        const decoyNumber = availableNumbers[randomIndex]
        decoyNumbers.set(multiple, decoyNumber)
      }
    })
    
    // Preenche o mapa de s√≠mbolos para todos os n√∫meros de 0 a 99
    for (let i = 0; i <= 99; i++) {
      if (i >= 10 && i % 9 === 0) {
        // M√∫ltiplos de 9 (a partir de 18) recebem seu s√≠mbolo espec√≠fico
        symbolMap.set(i, pageSymbols.get(i))
      } else if (i >= 10) {
        // Verifica se este n√∫mero √© o "isca" de algum m√∫ltiplo de 9
        let isDecoy = false
        for (const [multiple, decoy] of decoyNumbers.entries()) {
          if (i === decoy) {
            symbolMap.set(i, pageSymbols.get(multiple))
            isDecoy = true
            break
          }
        }
        
        if (!isDecoy) {
          // N√∫meros normais recebem s√≠mbolos aleat√≥rios
          const randomSymbol = distractionPool[Math.floor(Math.random() * distractionPool.length)]
          symbolMap.set(i, randomSymbol)
        }
      } else {
        // N√∫meros de 0 a 9 recebem s√≠mbolos aleat√≥rios
        const randomSymbol = distractionPool[Math.floor(Math.random() * distractionPool.length)]
        symbolMap.set(i, randomSymbol)
      }
    }
    
    // Retorna o s√≠mbolo do primeiro m√∫ltiplo de 9 como refer√™ncia
    const firstMagicSymbol = pageSymbols.get(9) || magicSymbol
    
    return { symbolMap, magicSymbol: firstMagicSymbol }
  }, [gameId]) // Regenera quando gameId muda

  /**
   * Avan√ßa para o pr√≥ximo passo
   */
  const nextStep = () => {
    setCurrentStep(prev => prev + 1)
    // Scroll autom√°tico para o topo da p√°gina
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' })
    }, 100)
  }

  /**
   * Volta para o passo anterior
   */
  const prevStep = () => {
    setCurrentStep(prev => Math.max(0, prev - 1))
  }

  /**
   * Reinicia o jogo
   */
  const restart = () => {
    setCurrentStep(0)
    setGameId(prev => prev + 1) // For√ßa regenera√ß√£o dos s√≠mbolos
    // Scroll autom√°tico para o topo da p√°gina
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' })
    }, 100)
  }

  /**
   * Vai para um passo espec√≠fico
   */
  const goToStep = (step) => {
    if (step >= 0 && step <= 5) {
      setCurrentStep(step)
    }
  }

  return {
    currentStep,
    symbolMap,
    magicSymbol,
    nextStep,
    prevStep,
    restart,
    goToStep
  }
}